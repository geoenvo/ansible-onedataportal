---
# Setup CKAN DataStore extension
# https://docs.ckan.org/en/2.8/maintaining/datastore.html
- name: "Create CKAN DataStore PostgreSQL user `{{ datastore_db.username }}` ({{ datastore_db.role_attr_flags }})"
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ datastore_db.username }}"
    password: "{{ datastore_db.password }}"
    role_attr_flags: "{{ datastore_db.role_attr_flags }}"

- name: Create CKAN DataStore PostgreSQL database `{{ datastore_db.name }}` owned by `{{ ckan_db.username }}`"
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ datastore_db.name }}"
    encoding: UTF-8
    template: template0
    owner: "{{ ckan_db.username }}"

- name: Enable DataStore database writing in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^#ckan.datastore.write_url'
    line: "ckan.datastore.write_url = postgresql://{{ ckan_db.username }}:{{ ckan_db.password }}@{{ datastore_db.host }}/{{ datastore_db.name }}"
    state: present

- name: Enable DataStore database reading in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^#ckan.datastore.read_url'
    line: "ckan.datastore.read_url = postgresql://{{ datastore_db.username }}:{{ datastore_db.password }}@{{ datastore_db.host }}/{{ datastore_db.name }}"
    state: present

- name: Check if DataStore extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*datastore.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: datastore_enabled

- name: Enable DataStore extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 datastore'
    state: present
  when: not datastore_enabled.found
  notify: reload apache2

- name: "Check if CKAN DataStore database initialized flag file `{{ ckan_conf_dir }}/.datastore_database_initialized` exists"
  stat:
    path: "{{ ckan_conf_dir }}/.datastore_database_initialized"
  register: datastore_database_initialized_stat

- name: "Initialize CKAN DataStore database permissions (only if `{{ ckan_conf_dir }}/.datastore_database_initialized` file does not exist)"
  shell: |
    {{ ckan_virtualenv }}/bin/paster --plugin=ckan datastore set-permissions -c {{ ckan_conf_dir }}/production.ini | sudo -u postgres psql --set ON_ERROR_STOP=1
    exit
  when: datastore_database_initialized_stat.stat.exists == false

- name: "Create CKAN DataStore database initialized flag file `{{ ckan_conf_dir }}/.datastore_database_initialized`"
  copy:
    content: "DataStore database initialized\n"
    dest: "{{ ckan_conf_dir }}/.datastore_database_initialized"
    mode: 0644
  when: datastore_database_initialized_stat.stat.exists == false
  notify: reload apache2

# Setup ckanext-spatial extension
# https://docs.ckan.org/projects/ckanext-spatial/en/latest/
- name: Update apt package cache
  apt:
    update_cache: yes

- name: Install ckanext-spatial prerequisite packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
   - python-dev
   - libxslt1-dev
   - libxml2-dev
   - libgeos-c1v5

- name: Enable PostGIS extension on CKAN database
  become: true
  become_user: postgres
  become_method: sudo
  shell: |
    psql -d {{ ckan_db.name }} -c "CREATE EXTENSION postgis; CREATE EXTENSION postgis_topology;"
    psql -d {{ ckan_db.name }} -c "ALTER VIEW geometry_columns OWNER TO {{ ckan_db.username }};"
    psql -d {{ ckan_db.name }} -c "ALTER TABLE spatial_ref_sys OWNER TO {{ ckan_db.username }};"
    exit

- name: "Install ckanext-spatial extension from `{{ ckanext_spatial_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_spatial_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "[FIX 2024] Lock `geolinks` package dependency for ckanext-spatial"
  pip:
    name: geolinks==0.2.0
    virtualenv: "{{ ckan_virtualenv }}"

- name: "Install ckanext-spatial package requirements from `{{ ckan_virtualenv }}/src/ckanext-spatial/pip-requirements.txt`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    # 202109 update ckanext-spatial from v0.2 to v1.0.0
    #requirements: "{{ ckan_virtualenv }}/src/ckanext-spatial/pip-requirements.txt"
    requirements: "{{ ckan_virtualenv }}/src/ckanext-spatial/pip-requirements-py2.txt"
    virtualenv: "{{ ckan_virtualenv }}"
    state: present

- name: Check if spatial_metadata and spatial_query extensions are already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*spatial_metadata spatial_query.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: spatial_plugins_enabled

- name: Enable spatial_metadata and spatial_query extensions in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 spatial_metadata spatial_query'
    state: present
  when: not spatial_plugins_enabled.found
  notify: reload apache2

# Setup ckanext-harvest extension
# https://github.com/ckan/ckanext-harvest
- name: Update apt package cache
  apt:
    update_cache: yes

- name: Install ckanext-harvest prerequisite packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
   - redis-server

- name: "Install ckanext-harvest extension version {{ ckanext_harvest_version }} from `{{ ckanext_harvest_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_harvest_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "[FIX] Install `urllib3` package dependency for ckanext-harvest v1.3.1"
  pip:
    name: urllib3
    virtualenv: "{{ ckan_virtualenv }}"
  when: ckanext_harvest_version == "v1.3.1"

- name: "[FIX 2024] Lock `pika` package dependency for ckanext-harvest v1.3.1"
  pip:
    name: pika==1.1.0
    virtualenv: "{{ ckan_virtualenv }}"
  when: ckanext_harvest_version == "v1.3.1"

- name: "Install ckanext-harvest package requirements from `{{ ckan_virtualenv }}/src/ckanext-harvest/pip-requirements.txt`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    requirements: "{{ ckan_virtualenv }}/src/ckanext-harvest/pip-requirements.txt"
    virtualenv: "{{ ckan_virtualenv }}"
    state: present

- name: Enable redis as harvest mq in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    insertafter: '^\[app:main\]$'
    line: ckan.harvest.mq.type = redis
    state: present

- name: Check if harvest ckan_harvester csw_harvester waf_harvester doc_harvester extensions are already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*harvest ckan_harvester csw_harvester waf_harvester doc_harvester.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: harvest_plugins_enabled

- name: Enable harvest ckan_harvester csw_harvester waf_harvester doc_harvester extensions in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 harvest ckan_harvester csw_harvester waf_harvester doc_harvester'
    state: present
  when: not harvest_plugins_enabled.found
  notify: reload apache2

- name: "Check if ckanext-harvest database tables initialized flag file `{{ ckan_conf_dir }}/.ckanext_harvest_tables_initialized` exists"
  stat:
    path: "{{ ckan_conf_dir }}/.ckanext_harvest_tables_initialized"
  register: ckanext_harvest_tables_initialized

- name: "[TEMPORARY] Set permissions on CKAN base js i18n directory `{{ ckan_virtualenv }}/src/ckan/ckan/public/base/i18n` to allow write access by CKAN process"
  file:
    path: "{{ ckan_virtualenv }}/src/ckan/ckan/public/base/i18n"
    state: directory
    recurse: yes
    owner: "{{ ckan_user.name }}"
    mode: 0755

- name: "Initialize ckanext-harvest database tables (only if `{{ ckan_conf_dir }}/.ckanext_harvest_tables_initialized` file does not exist)"
  shell: |
    {{ ckan_virtualenv }}/bin/paster --plugin=ckanext-harvest harvester initdb -c {{ ckan_conf_dir }}/production.ini
    exit
  when: ckanext_harvest_tables_initialized.stat.exists == false

- name: "Create ckanext-harvest database tables initialized flag file `{{ ckan_conf_dir }}/.ckanext_harvest_tables_initialized`"
  copy:
    content: "ckanext-harvest database tables initialized\n"
    dest: "{{ ckan_conf_dir }}/.ckanext_harvest_tables_initialized"
    mode: 0644
  when: ckanext_harvest_tables_initialized.stat.exists == false
  notify: reload apache2

# Setup ckanext-geoview extension (version 0.0.16 as of 202003)
# https://github.com/ckan/ckanext-geoview
- name: "Install ckanext-geoview extension version {{ ckanext_geoview_version }}"
  pip:
    name: "ckanext-geoview=={{ ckanext_geoview_version }}"
    virtualenv: "{{ ckan_virtualenv }}"

- name: "Add extra spatial settings to `{{ ckan_conf_dir }}/production.ini`"
  blockinfile:
    path: "{{ ckan_conf_dir }}/production.ini"
    marker: "# {mark} ANSIBLE MANAGED BLOCK Extra spatial settings"
    insertafter: '## Extra spatial settings'
    block: |

      #### Extra spatial settings
      ckan.spatial.srid = 4326
      ckanext.spatial.search_backend = solr
      # 100 MB * 1024 * 1024 = 104857600
      ckan.resource_proxy.max_file_size = 104857600
      ckanext.geoview.ol_viewer.formats = wms wfs geojson gml kml arcgis_rest gft
      # 100 MB * 1024 * 1024 = 104857600
      ckanext.geoview.geojson.max_file_size = 104857600
      ckanext.geoview.shp_viewer.srid = 4326
      ckanext.geoview.shp_viewer.encoding = UTF-8
      # for base layer settings below refer to https://docs.ckan.org/projects/ckanext-spatial/en/latest/map-widgets.html
      ckanext.spatial.common_map.type = custom
      ckanext.spatial.common_map.custom.url = http://tile.openstreetmap.org/{z}/{x}/{y}.png
      ckanext.spatial.common_map.attribution = Map tiles & Data by OpenStreetMap, under CC BY SA.
      ckanext.geoview.basemaps = %(here)s/basemaps.json
  notify: reload apache2

- name: Check if resource_proxy, geo_view, geojson_view, wmts_view, shp_view extensions are already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*resource_proxy geo_view geojson_view wmts_view shp_view.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: geoview_plugins_enabled

- name: Enable resource_proxy, geo_view, geojson_view, wmts_view, shp_view extensions in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 resource_proxy geo_view geojson_view wmts_view shp_view'
    state: present
  when: not geoview_plugins_enabled.found
  notify: reload apache2

- name: Check if geo_view, geojson_view, wmts_view, shp_view views are already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.views\.default_views.*geo_view geojson_view wmts_view shp_view.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: geoview_views_enabled

- name: Enable geo_view, geojson_view, wmts_view, shp_view default views in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.views\.default_views(.*)$)'
    backrefs: yes
    line: '\1 geo_view geojson_view wmts_view shp_view'
    state: present
  when: not geoview_views_enabled.found
  notify: reload apache2

- name: "Copy CKAN basemaps.json config file from template (only if `{{ ckan_conf_dir }}/basemaps.json` does not exist)"
  template:
    src: ../templates/basemaps.json.j2
    dest: "{{ ckan_conf_dir }}/basemaps.json"
    owner: "{{ ckan_user.name }}"
    group: "{{ ckan_user.name }}"
    mode: 0644
    force: no

# Setup CKAN DataPusher service (version 0.0.16 as of 202004)
# https://docs.ckan.org/projects/datapusher/en/latest/deployment.html
# https://github.com/ckan/datapusher
- name: "Check if DataPusher installed flag file `{{ ckan_conf_dir }}/.ckan_datapusher_installed` exists"
  stat:
    path: "{{ ckan_conf_dir }}/.ckan_datapusher_installed"
  register: ckan_datapusher_installed

- name: "Install DataPusher service from `{{ ckan_datapusher_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckan_datapusher_src_url }}"
    virtualenv: "{{ ckan_datapusher_virtualenv }}"
    editable: yes
    state: present
  when: ckan_datapusher_installed.stat.exists == false

- name: "Install DataPusher package requirements from `{{ ckan_virtualenv }}/src/datapusher/requirements.txt`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    requirements: "{{ ckan_datapusher_virtualenv }}/src/datapusher/requirements.txt"
    virtualenv: "{{ ckan_datapusher_virtualenv }}"
    state: present
  when: ckan_datapusher_installed.stat.exists == false

- name: "[FIX] Upgrade CKAN Service Provider package from v 0.0.8 to 0.0.9 to fix package conflict in DataPusher v 0.0.15"
  pip:
    name: ckanserviceprovider==0.0.9
    virtualenv: "{{ ckan_datapusher_virtualenv }}"
  when: ckan_datapusher_installed.stat.exists == false and fix_datapusher_0_0_15_package_conflict == true

- name: Copy DataPusher Apache virtualhost config file to `/etc/apache2/sites-available/datapusher.conf`
  shell: "cp {{ ckan_datapusher_virtualenv }}/src/datapusher/deployment/datapusher.apache2-4.conf /etc/apache2/sites-available/datapusher.conf"

- name: "Copy DataPusher WSGI config file to `{{ root_conf_dir }}/datapusher.wsgi`"
  shell: "cp {{ ckan_datapusher_virtualenv }}/src/datapusher/deployment/datapusher.wsgi {{ root_conf_dir }}"

- name: "Copy DataPusher settings file to `{{ root_conf_dir }}/datapusher_settings.py`"
  shell: "cp {{ ckan_datapusher_virtualenv }}/src/datapusher/deployment/datapusher_settings.py {{ root_conf_dir }}"

- name: Enable DataPusher formats in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^#ckan\.datapusher\.formats(.*)$'
    backrefs: yes
    line: 'ckan.datapusher.formats\1'
    state: present

- name: Enable DataPusher url in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^#ckan\.datapusher\.url(.*)$'
    backrefs: yes
    line: 'ckan.datapusher.url\1'
    state: present

- name: Check if DataPusher is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*datapusher.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: datapusher_enabled

- name: Enable DataPusher in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 datapusher'
    state: present
  when: not datapusher_enabled.found
  notify: reload apache2

- name: Add DataPusher port settings to `/etc/apache2/ports.conf` (listen on port 8800)
  blockinfile:
    path: /etc/apache2/ports.conf
    block: |
      #### CKAN DataPusher service port settings
      NameVirtualHost *:8800
      Listen 8800
  notify: reload apache2

- name: Enable DataPusher Apache virtualhost site
  shell: /usr/sbin/a2ensite datapusher
  notify: reload apache2

- name: "Create DataPusher installed flag file `{{ ckan_conf_dir }}/.ckan_datapusher_installed`"
  copy:
    content: "CKAN DataPusher installed\n"
    dest: "{{ ckan_conf_dir }}/.ckan_datapusher_installed"
    mode: 0644
  when: ckan_datapusher_installed.stat.exists == false

# Setup pycsw service (version 2.4.2 as of 202003)
# https://docs.ckan.org/projects/ckanext-spatial/en/latest/csw.html
# https://github.com/geopython/pycsw
- name: "Install pycsw service from `{{ pycsw_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ pycsw_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Copy pycsw config file from template
  template:
    src: ../templates/pycsw.cfg.j2
    dest: "{{ ckan_virtualenv }}/src/pycsw/default.cfg"
    owner: "{{ ckan_user.name }}"
    group: "{{ ckan_user.name }}"
    mode: 0644

- name: Create symlink from pycsw `default.cfg` to `pycsw.cfg` CKAN config directory
  file:
    src: "{{ ckan_virtualenv }}/src/pycsw/default.cfg"
    dest: "{{ ckan_conf_dir }}/pycsw.cfg"
    owner: "{{ ckan_user.name }}"
    group: "{{ ckan_user.name }}"
    state: link

- name: Create pycsw PostgreSQL database `{{ pycsw_db.name }}` owned by `{{ pycsw_db.username }}`"
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ pycsw_db.name }}"
    encoding: UTF-8
    template: template0
    owner: "{{ pycsw_db.username }}"

- name: Enable PostGIS extension on pycsw database
  become: true
  become_user: postgres
  become_method: sudo
  shell: |
    psql -d {{ pycsw_db.name }} -c "CREATE EXTENSION postgis; CREATE EXTENSION postgis_topology;"
    psql -d {{ pycsw_db.name }} -c "ALTER VIEW geometry_columns OWNER TO {{ pycsw_db.username }};"
    psql -d {{ pycsw_db.name }} -c "ALTER TABLE spatial_ref_sys OWNER TO {{ pycsw_db.username }};"
    exit

- name: "Check if pycsw database tables initialized flag file `{{ ckan_conf_dir }}/.pycsw_tables_initialized` exists"
  stat:
    path: "{{ ckan_conf_dir }}/.pycsw_tables_initialized"
  register: pycsw_tables_initialized

- name: "Initialize pycsw database tables (only if `{{ ckan_conf_dir }}/.pycsw_tables_initialized` file does not exist)"
  shell: |
    {{ ckan_virtualenv }}/bin/paster --plugin=ckanext-spatial ckan-pycsw setup -p {{ ckan_conf_dir }}/pycsw.cfg
    exit
  when: pycsw_tables_initialized.stat.exists == false

- name: "Create pycsw database tables initialized flag file `{{ ckan_conf_dir }}/.pycsw_tables_initialized`"
  copy:
    content: "pycsw database tables initialized\n"
    dest: "{{ ckan_conf_dir }}/.pycsw_tables_initialized"
    mode: 0644
  when: pycsw_tables_initialized.stat.exists == false

- name: "Install cron job to run pycsw service on @reboot"
  cron:
    name: "start pycsw"
    state: present
    special_time: reboot
    job: "{{ ckan_virtualenv }}/bin/python {{ ckan_virtualenv }}/src/pycsw/pycsw/wsgi.py >> /var/log/pycsw.log 2>&1"

# Setup ckanext-agsview extension
# https://github.com/OpenGov-OpenData/ckanext-agsview
- name: "Install ckanext-agsview extension from `{{ ckanext_agsview_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_agsview_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "Add extra ckanext-agsview settings to `{{ ckan_conf_dir }}/production.ini`"
  blockinfile:
    path: "{{ ckan_conf_dir }}/production.ini"
    marker: "# {mark} ANSIBLE MANAGED BLOCK Extra ckanext-agsview settings"
    insertafter: '## Extra ckanext-agsview settings'
    block: |

      #### Extra ckanext-agsview settings
      # set default esri basemap http://esri.github.io/esri-leaflet/api-reference/layers/basemap-layer.html
      ckanext.ags_view_default_basemap_url = Gray
      ckanext.ags_view_proxy = '{}'
  notify: reload apache2

- name: Check if ags_fs_view, ags_ms_view extensions are already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*ags_fs_view ags_ms_view.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: agsview_plugins_enabled

- name: Enable ags_fs_view, ags_ms_view extensions in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 ags_fs_view ags_ms_view'
    state: present
  when: not agsview_plugins_enabled.found
  notify: reload apache2

# Setup ckanext-pdfview extension
# https://github.com/ckan/ckanext-pdfview
- name: "Install ckanext-pdfview extension from `{{ ckanext_pdfview_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_pdfview_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Check if pdf_view extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*pdf_view.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: pdfview_plugin_enabled

- name: Enable pdf_view extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 pdf_view'
    state: present
  when: not pdfview_plugin_enabled.found
  notify: reload apache2

- name: Check if pdf_view view is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.views\.default_views.*pdf_view.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: pdf_view_enabled

- name: Enable pdf_view default view in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.views\.default_views(.*)$)'
    backrefs: yes
    line: '\1 pdf_view'
    state: present
  when: not pdf_view_enabled.found
  notify: reload apache2

# Setup ckanext-pages extension
# https://github.com/ckan/ckanext-pages
- name: "Install ckanext-pages extension from `{{ ckanext_pages_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_pages_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Check if pages extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*pages.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: pages_plugin_enabled

- name: Enable pages extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 pages'
    state: present
  when: not pages_plugin_enabled.found
  notify: reload apache2

# Setup ckanext-officedocs extension
# https://github.com/jqnatividad/ckanext-officedocs
- name: "Install ckanext-officedocs extension from `{{ ckanext_officedocs_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_officedocs_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Check if officedocs_view extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*officedocs_view.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: officedocs_plugin_enabled

- name: Enable officedocs_view extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 officedocs_view'
    state: present
  when: not officedocs_plugin_enabled.found
  notify: reload apache2

- name: Check if officedocs_view view is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.views\.default_views.*officedocs_view.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: officedocs_view_enabled

- name: Enable officedocs_view default view in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.views\.default_views(.*)$)'
    backrefs: yes
    line: '\1 officedocs_view'
    state: present
  when: not officedocs_view_enabled.found
  notify: reload apache2

# Setup ckanext-onedataportal extension
# https://github.com/geoenvo/ckanext-onedataportal
- name: "Install ckanext-onedataportal extension from `{{ ckanext_onedataportal_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_onedataportal_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "Install ckanext-onedataportal package requirements from `{{ ckan_virtualenv }}/src/ckanext-onedataportal/requirements.txt`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    requirements: "{{ ckan_virtualenv }}/src/ckanext-onedataportal/requirements.txt"
    virtualenv: "{{ ckan_virtualenv }}"
    state: present

- name: "Add extra ckanext-onedataportal settings to `{{ ckan_conf_dir }}/production.ini`"
  blockinfile:
    path: "{{ ckan_conf_dir }}/production.ini"
    marker: "# {mark} ANSIBLE MANAGED BLOCK Extra ckanext-onedataportal settings"
    insertafter: '## Extra ckanext-onedataportal settings'
    block: |

      #### Extra ckanext-onedataportal settings
      # setting for the Geoportal link in the nav menu
      ckan.onedataportal.geoportal_url = {{ ckan_onedataportal_geoportal_url }}
      ckan.onedataportal.geoportal_name = {{ ckan_onedataportal_geoportal_name }}
      # extra nav links in the nav menu, the Navlink URL must start with http://, https://, or /
      #ckan.onedataportal.navlink1_url =
      #ckan.onedataportal.navlink1_name =
      #ckan.onedataportal.navlink2_url =
      #ckan.onedataportal.navlink2_name =
      #ckan.onedataportal.navlink3_url =
      #ckan.onedataportal.navlink3_name =
      # if convert_shpz is set to True all uploaded PointZ/M, PolyLineZ/M, PolygonZ/M, MultiPointZ/M zip shapefiles
      # will have their Z/M-values removed, this is due to the CKAN ckanext-geoview SHP viewer not supporting
      # shapefiles with Z/M-values
      ckan.onedataportal.convert_shpz = True
      # if sysadmin_disable_create_dataset is set to True then all Sysadmin users will not be able to create new datasets
      # but they will still be able to edit datasets
      ckan.onedataportal.sysadmin_disable_create_dataset = True
  notify: reload apache2

- name: Check if onedataportal extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*onedataportal.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: onedataportal_plugin_enabled

- name: Enable onedataportal extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 onedataportal'
    state: present
  when: not onedataportal_plugin_enabled.found
  notify: reload apache2

# Setup ckanext-issues extension
# https://github.com/OpenGov-OpenData/ckanext-issues.git
- name: "Install ckanext-issues extension from `{{ ckanext_issues_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_issues_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "Add extra ckanext-issues settings to `{{ ckan_conf_dir }}/production.ini`"
  blockinfile:
    path: "{{ ckan_conf_dir }}/production.ini"
    marker: "# {mark} ANSIBLE MANAGED BLOCK Extra ckanext-issues settings"
    insertafter: '## Extra ckanext-issues settings'
    block: |

      #### Extra ckanext-issues settings
      ckanext.issues.send_email_notifications = {{ ckan_issues_send_email_notifications }}
  notify: reload apache2

- name: Check if issues extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*issues.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: issues_plugin_enabled

- name: Enable issues extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 issues'
    state: present
  when: not issues_plugin_enabled.found
  notify: reload apache2

- name: "Check if ckanext-issues database tables initialized flag file `{{ ckan_conf_dir }}/.ckanext_issues_tables_initialized` exists"
  stat:
    path: "{{ ckan_conf_dir }}/.ckanext_issues_tables_initialized"
  register: ckanext_issues_tables_initialized

- name: "Initialize ckanext-issues database tables (only if `{{ ckan_conf_dir }}/.ckanext_issues_tables_initialized` file does not exist)"
  shell: |
    {{ ckan_virtualenv }}/bin/paster --plugin=ckanext-issues issues init_db -c {{ ckan_conf_dir }}/production.ini
    exit
  when: ckanext_issues_tables_initialized.stat.exists == false

- name: "Create ckanext-issues database tables initialized flag file `{{ ckan_conf_dir }}/.ckanext_issues_tables_initialized`"
  copy:
    content: "ckanext-issues database tables initialized\n"
    dest: "{{ ckan_conf_dir }}/.ckanext_issues_tables_initialized"
    mode: 0644
  when: ckanext_issues_tables_initialized.stat.exists == false
  notify: reload apache2

# Setup ckanext-privatedatasets extension
# https://github.com/geoenvo/ckanext-privatedatasets.git
- name: "Install ckanext-privatedatasets extension from `{{ ckanext_privatedatasets_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_privatedatasets_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "Add extra ckanext-privatedatasets settings to `{{ ckan_conf_dir }}/production.ini`"
  blockinfile:
    path: "{{ ckan_conf_dir }}/production.ini"
    marker: "# {mark} ANSIBLE MANAGED BLOCK Extra ckanext-privatedatasets settings"
    insertafter: '## Extra ckanext-privatedatasets settings'
    block: |

      #### Extra ckanext-privatedatasets settings
      ckan.privatedatasets.parser = ckanext.privatedatasets.parsers.fiware:FiWareNotificationParser
  notify: reload apache2

- name: Check if privatedatasets extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*privatedatasets.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: privatedatasets_plugin_enabled

- name: Enable privatedatasets extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 privatedatasets'
    state: present
  when: not privatedatasets_plugin_enabled.found
  notify: reload apache2

# Setup ckanext-scheming extension
# https://github.com/ckan/ckanext-scheming.git
- name: "Install ckanext-scheming extension from `{{ ckanext_scheming_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_scheming_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "Install ckanext-scheming package requirements from `{{ ckan_virtualenv }}/src/ckanext-scheming/requirements.txt`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    requirements: "{{ ckan_virtualenv }}/src/ckanext-scheming/requirements.txt"
    virtualenv: "{{ ckan_virtualenv }}"
    state: present

- name: "Add extra ckanext-scheming settings to `{{ ckan_conf_dir }}/production.ini`"
  blockinfile:
    path: "{{ ckan_conf_dir }}/production.ini"
    marker: "# {mark} ANSIBLE MANAGED BLOCK Extra ckanext-scheming settings"
    insertafter: '## Extra ckanext-scheming settings'
    block: |

      #### Extra ckanext-scheming settings
      scheming.presets = ckanext.onedataportal:presets.json ckanext.repeating:presets.json ckanext.composite:presets.json ckanext.validation:presets.json
      scheming.dataset_schemas = ckanext.onedataportal:ckan_dataset.json
  notify: reload apache2

- name: Check if scheming extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*scheming_datasets.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: scheming_plugin_enabled

- name: Enable scheming extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 scheming_datasets'
    state: present
  when: not scheming_plugin_enabled.found
  notify: reload apache2

# Setup ckanext-repeating extension
# https://github.com/open-data/ckanext-repeating.git
- name: "Install ckanext-repeating extension from `{{ ckanext_repeating_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_repeating_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Check if repeating extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*repeating.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: repeating_plugin_enabled

- name: Enable repeating extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 repeating'
    state: present
  when: not repeating_plugin_enabled.found
  notify: reload apache2

# Setup ckanext-composite extension
# https://github.com/EnviDat/ckanext-composite.git
- name: "Install ckanext-composite extension from `{{ ckanext_composite_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_composite_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Check if composite extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*composite.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: composite_plugin_enabled

- name: Enable composite extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 composite'
    state: present
  when: not composite_plugin_enabled.found
  notify: reload apache2

# Setup ckanext-validation extension
# https://github.com/frictionlessdata/ckanext-validation.git
- name: "Install ckanext-validation extension from `{{ ckanext_validation_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_validation_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: "[FIX 2024] Lock `tableschema` package dependency for ckanext-validation"
  pip:
    name: tableschema==1.20.0
    virtualenv: "{{ ckan_virtualenv }}"

- name: "[FIX 2024] Lock `datapackage` package dependency for ckanext-validation"
  pip:
    name: datapackage==1.15.1
    virtualenv: "{{ ckan_virtualenv }}"

- name: "Install ckanext-validation package requirements from `{{ ckan_virtualenv }}/src/ckanext-validation/requirements.txt`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    requirements: "{{ ckan_virtualenv }}/src/ckanext-validation/requirements.txt"
    virtualenv: "{{ ckan_virtualenv }}"
    state: present

- name: Check if validation extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*validation.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: validation_plugin_enabled

- name: Enable validation extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 validation'
    state: present
  when: not validation_plugin_enabled.found
  notify: reload apache2

- name: "Check if ckanext-validation database tables initialized flag file `{{ ckan_conf_dir }}/.ckanext_validation_tables_initialized` exists"
  stat:
    path: "{{ ckan_conf_dir }}/.ckanext_validation_tables_initialized"
  register: ckanext_validation_tables_initialized

- name: "Initialize ckanext-validation database tables (only if `{{ ckan_conf_dir }}/.ckanext_validation_tables_initialized` file does not exist)"
  shell: |
    {{ ckan_virtualenv }}/bin/paster --plugin=ckanext-validation validation init-db -c {{ ckan_conf_dir }}/production.ini
    exit
  when: ckanext_validation_tables_initialized.stat.exists == false

- name: "Create ckanext-validation database tables initialized flag file `{{ ckan_conf_dir }}/.ckanext_validation_tables_initialized`"
  copy:
    content: "ckanext-validation database tables initialized\n"
    dest: "{{ ckan_conf_dir }}/.ckanext_validation_tables_initialized"
    mode: 0644
  when: ckanext_validation_tables_initialized.stat.exists == false
  notify: reload apache2

# Setup ckanext-mapviews extension
# https://github.com/ckan/ckanext-mapviews
- name: "Install ckanext-mapviews extension from `{{ ckanext_mapviews_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_mapviews_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Check if mapviews extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*navigablemap choroplethmap.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: mapviews_plugin_enabled

- name: Enable mapviews extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 navigablemap choroplethmap'
    state: present
  when: not mapviews_plugin_enabled.found
  notify: reload apache2

# Setup ckanext-basiccharts extension
# https://github.com/localidata/ckanext-basiccharts
- name: "Install ckanext-basiccharts extension from `{{ ckanext_basiccharts_src_url }}`"
  become: true
  become_user: "{{ ckan_user.name }}"
  pip:
    name: "{{ ckanext_basiccharts_src_url }}"
    virtualenv: "{{ ckan_virtualenv }}"
    editable: yes
    state: present

- name: Check if basiccharts extension is already enabled in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^ckan\.plugins.*linechart barchart piechart basicgrid.*$'
    state: absent
  check_mode: yes
  changed_when: false
  register: basiccharts_plugin_enabled

- name: Enable basiccharts extension in production.ini
  lineinfile:
    dest: "{{ ckan_conf_dir }}/production.ini"
    regexp: '^(ckan\.plugins(.*)$)'
    backrefs: yes
    line: '\1 linechart barchart piechart basicgrid'
    state: present
  when: not basiccharts_plugin_enabled.found
  notify: reload apache2

- name: "Set permissions on CKAN base js i18n directory `{{ ckan_virtualenv }}/src/ckan/ckan/public/base/i18n` to allow write access by Apache process"
  file:
    path: "{{ ckan_virtualenv }}/src/ckan/ckan/public/base/i18n"
    state: directory
    recurse: yes
    owner: www-data
    mode: 0755
