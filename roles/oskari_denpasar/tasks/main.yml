---
- name: "Clone dependency Oskari Frontend repo from `https://github.com/oskariorg/oskari-frontend/` (1.55.2 tag) to `{{ install_dir_oskari }}/oskari-server/oskari-frontend`"
  git:
    repo: https://github.com/oskariorg/oskari-frontend.git
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-frontend"
    version: "tags/{{ oskari_version }}"
    clone: yes
    update: yes

- name: "Clone dependency Oskari Frontend Contrib repo from `https://github.com/oskariorg/oskari-frontend-contrib/` (1.55.2 tag) to `{{ install_dir_oskari }}/oskari-server/oskari-frontend-contrib`"
  git:
    repo: https://github.com/oskariorg/oskari-frontend-contrib.git
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-frontend-contrib"
    version: "tags/{{ oskari_version }}"
    clone: yes
    update: yes

- name: "Clone Oskari Denpasar frontend application repo from `https://github.com/geoenvo/oskari-application-dps/` (wb-idp branch) to `{{ install_dir_oskari }}/oskari-server/oskari-application-dps`"
  git:
    repo: https://github.com/geoenvo/oskari-application-dps.git
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps"
    version: "wb-idp"
    clone: yes
    update: yes

- name: "Ensure `{{ install_dir_oskari }}/oskari-server/oskari-frontend` exists"
  file:
    path: "{{ install_dir_oskari }}/oskari-server/oskari-frontend"
    state: directory

- name: "Ensure `{{ install_dir_oskari }}/oskari-server/oskari-frontend-contrib` exists"
  file:
    path: "{{ install_dir_oskari }}/oskari-server/oskari-frontend-contrib"
    state: directory

- name: "Ensure `{{ install_dir_oskari }}/oskari-server/oskari-application-dps` exists"
  file:
    path: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps"
    state: directory

- name: "Run `sudo npm install` in `{{ install_dir_oskari }}/oskari-server/oskari-application-dps`"
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/oskari-application-dps
    sudo npm install
    exit

- name: "Run `sudo npm install` in `{{ install_dir_oskari }}/oskari-server/oskari-application-dps/node_modules/oskari-frontend`"
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/oskari-application-dps/node_modules/oskari-frontend
    sudo npm install
    exit

- name: "Run `sudo npm install` in `{{ install_dir_oskari }}/oskari-server/oskari-application-dps/node_modules/oskari-frontend-contrib`"
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/oskari-application-dps/node_modules/oskari-frontend-contrib
    sudo npm install
    exit

- name: "Run `sudo npm run build` in `{{ install_dir_oskari }}/oskari-server/oskari-application-dps`"
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/oskari-application-dps
    sudo npm run build -- --env.appdef=wbidp:applications
    exit

- name: "Ensure `{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}` exists"
  file:
    path: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}"
    state: directory

- name: Backup `oskari-front.xml` file if backup file `oskari-front.xml.orig` does not exist
  shell: "cp {{ install_dir_oskari }}/oskari-server/webapps/oskari-front.xml {{ install_dir_oskari }}/oskari-server/webapps/oskari-front.xml.orig"
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/webapps/oskari-front.xml.orig"

- name: Copy `oskari-front.xml` settings file for Oskari from template
  template:
    src: ../templates/oskari-front.xml.j2
    dest: "{{ install_dir_oskari }}/oskari-server/webapps/oskari-front.xml"
    owner: root
    group: root
    mode: 0644

- name: Backup `oskari_lang_id.js` file in `geoportal` if backup file `oskari_lang_id.js.orig` does not exist
  shell: "cp {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal/oskari_lang_id.js {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal/oskari_lang_id.js.orig"
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal/oskari_lang_id.js.orig"

- name: Backup `oskari_lang_id.js` file in `geoportal-3d` if backup file `oskari_lang_id.js.orig` does not exist
  shell: "cp {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal-3d/oskari_lang_id.js {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal-3d/oskari_lang_id.js.orig"
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal-3d/oskari_lang_id.js.orig"

- name: Backup `oskari_lang_id.js` file in `embedded` if backup file `oskari_lang_id.js.orig` does not exist
  shell: "cp {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded/oskari_lang_id.js {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded/oskari_lang_id.js.orig"
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded/oskari_lang_id.js.orig"

- name: Backup `oskari_lang_id.js` file in `embedded-3d` if backup file `oskari_lang_id.js.orig` does not exist
  shell: "cp {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded-3d/oskari_lang_id.js {{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded-3d/oskari_lang_id.js.orig"
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded-3d/oskari_lang_id.js.orig"

- name: Copy `oskari_lang_id.js` file for Oskari from template for `geoportal`
  copy:
    src: ../../oskari/templates/oskari_lang_id.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal/oskari_lang_id.js"
    owner: root
    group: root
    mode: 0644

- name: Copy `oskari_lang_in.js` file for Oskari from template for `geoportal`
  copy:
    src: ../../oskari/templates/oskari_lang_in.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal/oskari_lang_in.js"
    owner: root
    group: root
    mode: 0644

- name: Copy `oskari_lang_id.js` file for Oskari from template for `geoportal-3d`
  copy:
    src: ../../oskari/templates/oskari_lang_id.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal-3d/oskari_lang_id.js"
    owner: root
    group: root
    mode: 0644

- name: Copy `oskari_lang_in.js` file for Oskari from template for `geoportal-3d`
  copy:
    src: ../../oskari/templates/oskari_lang_in.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/geoportal-3d/oskari_lang_in.js"
    owner: root
    group: root
    mode: 0644

- name: Copy `oskari_lang_id.js` file for Oskari from template for `embedded`
  copy:
    src: ../../oskari/templates/oskari_lang_id.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded/oskari_lang_id.js"
    owner: root
    group: root
    mode: 0644

- name: Copy `oskari_lang_in.js` file for Oskari from template for `embedded`
  copy:
    src: ../../oskari/templates/oskari_lang_in.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded/oskari_lang_in.js"
    owner: root
    group: root
    mode: 0644

- name: Copy `oskari_lang_id.js` file for Oskari from template for `embedded-3d`
  copy:
    src: ../../oskari/templates/oskari_lang_id.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded-3d/oskari_lang_id.js"
    owner: root
    group: root
    mode: 0644

- name: Copy `oskari_lang_in.js` file for Oskari from template for `embedded-3d`
  copy:
    src: ../../oskari/templates/oskari_lang_in.js
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-application-dps/dist/{{ oskari_new_client_version }}/embedded-3d/oskari_lang_in.js"
    owner: root
    group: root
    mode: 0644

- name: "Comment old `{{ oskari_client_version }}` client version in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    regexp: '^oskari\.client\.version(.*)$'
    backrefs: yes
    line: '#oskari.client.version\1'
    state: present

- name: "Change client version from `{{ oskari_client_version }}` to `{{ oskari_new_client_version }}` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: '^#oskari\.client\.version.*$'
    line: "oskari.client.version=dist/{{ oskari_new_client_version }}"
    state: present

- name: "Clone Oskari Denpasar server extension repo from `https://github.com/geoenvo/oskari-server-extension-dps/` (wb-idp branch) to `{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps`"
  git:
    repo: https://github.com/geoenvo/oskari-server-extension-dps.git
    dest: "{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps"
    version: "wb-idp"
    clone: yes
    update: yes

- name: "Ensure `{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps` exists"
  file:
    path: "{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps"
    state: directory

- name: "Check if custom `oskari-map.war` build already exists in `{{ working_dir }}` (will skip long `mvn clean install` task)"
  stat:
    path: "{{ working_dir }}/oskari-map.war"
  register: oskari_map_war_stat

- name: "Create `oskari-map.war` build directory `{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps/webapp-map/target`"
  file:
    path: "{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps/webapp-map/target"
    mode: 0755
    state: directory
  when: oskari_map_war_stat.stat.exists == true

- name: "Copy custom `oskari-map.war` build from `{{ working_dir }}/oskari-map.war` to `{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps/webapp-map/target/oskari-map.war`"
  shell: "cp {{ working_dir }}/oskari-map.war {{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps/webapp-map/target/oskari-map.war"
  when: oskari_map_war_stat.stat.exists == true

- name: "Create root user Maven settings directory at `/root/.m2`"
  file:
    path: "/root/.m2"
    owner: root
    group: root
    mode: 0755
    state: directory

- name: "[FIX 2024] Copy `settings.xml` file for Maven from template for overriding `mvn clean install` settings"
  copy:
    src: ../templates/settings.xml
    dest: "/root/.m2/settings.xml"
    owner: root
    group: root
    mode: 0644

- name: "Run `mvn clean install` in `{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps` to build custom `oskari-map.war`"
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps
    mvn clean install > oskari-server-extension-build.log
    exit
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps/webapp-map/target/oskari-map.war"

- name: Backup `oskari-map.war` file if backup file `oskari-map.war.orig` does not exist
  shell: "cp {{ install_dir_oskari }}/oskari-server/webapps/oskari-map.war {{ install_dir_oskari }}/oskari-server/webapps/oskari-map.war.orig"
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/webapps/oskari-map.war.orig"

- name: "Copy custom `oskari-map.war` build to `{{ install_dir_oskari }}/oskari-server/webapps/` (overwrite existing file)"
  shell: "cp {{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps/webapp-map/target/oskari-map.war {{ install_dir_oskari }}/oskari-server/webapps/oskari-map.war"

- name: "Comment default `db.additional.modules` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    regexp: '^db\.additional\.modules(.*)$'
    backrefs: yes
    line: '#db.additional.modules\1'
    state: present

- name: "Enable `{{ oskari_custom_module }}` in `db.additional.modules` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: '^#db\.additional\.modules.*$'
    line: "db.additional.modules=myplaces, userlayer, {{ oskari_custom_module }}"
    state: present

- name: "Comment default `actionhandler.GetAppSetup.dynamic.bundles` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    regexp: '^actionhandler\.GetAppSetup\.dynamic\.bundles(.*)$'
    backrefs: yes
    line: '#actionhandler.GetAppSetup.dynamic.bundles\1'
    state: present

- name: "Enable `content-editor` bundle in `actionhandler.GetAppSetup.dynamic.bundles` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: '^#actionhandler\.GetAppSetup\.dynamic\.bundles.*$'
    line: "actionhandler.GetAppSetup.dynamic.bundles = admin-hierarchical-layerlist, admin-layereditor, admin-layerselector, admin-layerrights, admin-users, admin, content-editor"
    state: present

- name: "Enable `content-editor` bundle for Admin role in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: '^actionhandler\.GetAppSetup\.dynamic\.bundle\.admin\.roles.*$'
    line: "actionhandler.GetAppSetup.dynamic.bundle.content-editor.roles = Admin"
    state: present

- name: "Comment default `oskari.user.service` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    regexp: '^oskari\.user\.service(.*)$'
    backrefs: yes
    line: '#oskari.user.service\1'
    state: present

- name: "Enable custom user service `wbidp.oskari.util.DatabaseUserServiceCKAN` bundle in `oskari.user.service` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: '^#oskari\.user\.service(.*)$'
    line: "oskari.user.service=wbidp.oskari.util.DatabaseUserServiceCKAN"
    state: present

- name: "Add extra settings for CKAN-Oskari integration, download bundle, and content editor bundle to Oskari settings"
  blockinfile:
    path: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    block: |

      ##################################
      # CKAN-Oskari Integration Setup
      ##################################
      oskari.scheduler.job.SynchronizeUserDataJob.cronLine={{ oskari_synchronizeuserdatajob_cronline }}
      oskari.scheduler.job.SynchronizeLayerDataJob.cronLine={{ oskari_synchronizelayerdatajob_cronline }}
      ckan.integration.db.url=jdbc:postgresql://{{ ckan_db.host }}:5432/{{ ckan_db.name }}
      ckan.integration.db.truncate=false
      ckan.integration.db.username={{ ckan_db.username }}
      ckan.integration.db.password={{ ckan_db.password }}
      ckan.integration.ckanapi.dump.organizations={{ ckan_ckanapi_organizations_dump_file }}
      ckan.integration.ckanapi.dump.users={{ ckan_ckanapi_users_dump_file }}
      ckan.integration.ckanapi.dump.datasets={{ ckan_ckanapi_datasets_dump_file }}
      ckan.integration.ckanapi.dump.datasets.secondary={{ ckan_ckanapi_datasets_secondary_dump_file }}
      ckan.integration.ckanapi.sysadmin.apikey={{ ckan_sysadmin_api_key }}
      ckan.integration.ckanapi.shp.resourceworkspaces=true
      ckan.integration.ckanapi.shp.forceproxy=true
      ckan.integration.ckanapi.geotiff.forceproxy=true
      ##################################
      # Download Bundle Settings
      ##################################
      oskari.wfs.download.folder.name={{ install_dir_oskari }}/oskari-server/webapps/downloads
      oskari.wfs.download.normal.way.downloads=rectangle
      oskari.wfs.download.smtp.host=localhost
      oskari.wfs.download.smtp.port=25
      oskari.wfs.download.email.from={{ ckan_smtp_mail_from }}
      oskari.wfs.download.email.subject=Download service
      oskari.wfs.download.email.header=
      oskari.wfs.download.email.message=The data you ordered can be downloaded at:\n
      oskari.wfs.download.email.footer={LINEBREAK}The download address is valid for 10 days.
      oskari.wfs.download.email.message.datadescription={LINEBREAK}Do not reply to this email.{LINEBREAK}{LINEBREAK}
      oskari.wfs.download.email.datadescription_link=
      #oskari.wfs.download.link.url.prefix=https://localhost:8080/downloads/
      oskari.wfs.download.link.url.prefix={{ oskari_domain }}/downloads/
      oskari.wfs.service.url={{ oskari_wfs_service_url }}
      oskari.wfs.error.message=Error in download service service, please try again later.
      oskari.wfs.download.error.report.support.email={{ ckan_email_to }}
      oskari.wfs.download.error.report.subject=Error in download service
      ##################################
      # Content Editor Bundle Settings
      ##################################
      permission.types = EDIT_LAYER_CONTENT
      permission.EDIT_LAYER_CONTENT.name.fi=Edit layer
      permission.EDIT_LAYER_CONTENT.name.en=Edit layer
      permission.EDIT_LAYER_CONTENT.name.id=Edit layer
      permission.EDIT_LAYER_CONTENT.name.in=Edit layer

- name: "Create Oskari downloads directory `{{ install_dir_oskari }}/oskari-server/webapps/downloads`"
  file:
    path: "{{ install_dir_oskari }}/oskari-server/webapps/downloads"
    mode: 0755
    state: directory

- name: "Run SQL script to enable `download-basket` bundle in Oskari database"
  become: true
  become_user: postgres
  become_method: sudo
  shell: |
    psql -d {{ oskari_db.name }} -f {{ install_dir_oskari }}/oskari-server/oskari-server-extension-dps/server-extension/src/main/resources/sql/001-download-basket.sql
    exit

- name: "Install 10 minute interval cron job for dumping CKAN Users"
  cron:
    name: "ckanapi dump users"
    state: present
    minute: "*/10"
    job: "PATH={{ ckan_virtualenv }}/bin:/bin && {{ ckan_virtualenv }}/bin/python {{ ckan_virtualenv }}/bin/ckanapi dump users --all -O {{ ckan_ckanapi_users_dump_file }} -c {{ ckan_conf_dir }}/production.ini && chmod 400 {{ ckan_ckanapi_users_dump_file }}"

- name: "Install 10 minute interval cron job for dumping CKAN Organizations"
  cron:
    name: "ckanapi dump organizations"
    state: present
    minute: "*/10"
    job: "PATH={{ ckan_virtualenv }}/bin:/bin && {{ ckan_virtualenv }}/bin/python {{ ckan_virtualenv }}/bin/ckanapi dump organizations --all -O {{ ckan_ckanapi_organizations_dump_file }} -c {{ ckan_conf_dir }}/production.ini && chmod 400 {{ ckan_ckanapi_organizations_dump_file }}"

- name: "Install 10 minute interval cron job for dumping CKAN Datasets"
  cron:
    name: "ckanapi dump datasets"
    state: present
    minute: "*/10"
    job: "PATH={{ ckan_virtualenv }}/bin:/bin && {{ ckan_virtualenv }}/bin/python {{ ckan_virtualenv }}/bin/ckanapi dump datasets --all -O {{ ckan_ckanapi_datasets_dump_file }} -c {{ ckan_conf_dir }}/production.ini && chmod 400 {{ ckan_ckanapi_datasets_dump_file }}"

- name: "Install 10 minute interval cron job for dumping CKAN (Secondary) Private Datasets"
  cron:
    name: "ckanapi search datasets"
    state: present
    minute: "*/10"
    job: "PATH={{ ckan_virtualenv }}/bin:/bin && {{ ckan_virtualenv }}/bin/python {{ ckan_virtualenv }}/bin/ckanapi search datasets fq=private:true include_private=true -O {{ ckan_ckanapi_datasets_secondary_dump_file }} -c {{ ckan_conf_dir }}/production.ini && chmod 400 {{ ckan_ckanapi_datasets_secondary_dump_file }}"
